#include<iostream>
#include<queue>
#include<stack>
using namespace std;

class Graph {
private:
      bool **adjMatrix;
      int vertexCount;
	  
	  int time;
	  int *state; 	  	  
	  int *startTime;
	  int *endTime;
	  int *parent;

	  stack<int> topologicalSort;

	  bool **transMatrix;
	  int *sccState;

public:
    Graph(int vertexCount);
    ~Graph();
	int getVertexCount();
    void addEdgeUndirected(int i, int j);
	void addEdgeDirected(int i, int j);
    void removeEdgeDirected(int i, int j);
	void removeEdgeUndirected(int i, int j);

    bool isEdge(int i, int j);
    void display();
	void initializeState();		
	void showStateInfo();
	void showStartAndEndTime();
	void showParentInfo();

	void DFS(); // it will start at from 0 if the vertex is 0, 1, 2...
	void DFS_Visit(int startNode);	

//------------------Topological sort and SCC----------------

	void showTopologicalSort();
	void doTransMatrix();
	void findStronglyConnectedComponents();
	bool isEdgeSCC(int i, int j);
	void DFS_SCC(); // To find the strongly connected components
	void DFS_Visit_SCC(int startNode);
	void displayTranspose();
};
Graph::Graph(int vertexCount) {	
    this->vertexCount = vertexCount;
	this->time = 0;

	this->state = new int[vertexCount];		
	this->startTime = new int[vertexCount];
	this->endTime = new int[vertexCount];	
	this->parent = new int[vertexCount];

	this->sccState = new int [vertexCount];
	
	int i, j;
    adjMatrix = new bool*[vertexCount];
    for (i = 0; i < vertexCount; i++) {
        adjMatrix[i] = new bool[vertexCount];
           for (j = 0; j < vertexCount; j++)
              adjMatrix[i][j] = false;
    }
//-------------- To find strongly Connected Components---------------
	transMatrix = new bool*[vertexCount];  
    for (i = 0; i < vertexCount; i++) {
        transMatrix[i] = new bool[vertexCount];
           for (j = 0; j < vertexCount; j++)
              transMatrix[i][j] = false;
    }
}
Graph::~Graph() {
	int i;
    for (i = 0; i < vertexCount; i++)
         delete[] adjMatrix[i];
            delete[] adjMatrix;

//---------- Delete tranMatrix----------------

	for (i = 0; i < vertexCount; i++)
		delete[] transMatrix[i];
			delete[] transMatrix;
}
void Graph::initializeState(){
	for(int i=0; i<this->vertexCount; i++){
		this->state[i] = 0; // 0=undiscovered, 1=discovered, 2=processed				
	
		this->startTime[i]=-1;
		this->endTime[i]=-1;
		this->parent[i] = -1; // no parent

		this->sccState[i] = 0; //for strongly connected components
	}
}
void Graph::showStateInfo(){
	cout<<"Graph State Info...\n";
	for(int i=0; i<this->vertexCount; i++){
		cout<<"Node "<<i<<"\tNode State: "<<this->state[i]<<"\n";
	}
}
void Graph::showParentInfo(){
	cout<<"Graph parent Info...\n";
	for(int i=0; i<this->vertexCount; i++){
		cout<<"Node "<<i<<"\tNode's Parent: "<<this->parent[i]<<"\n";
	}
}
void Graph::showStartAndEndTime(){
	cout<<"\n";
	for(int i=0; i<this->vertexCount; i++){
		cout<<"Node "<<i<<"\tStart Time: "<<this->startTime[i]
			<<"\tEnd Time: "<<this->endTime[i]<<"\n";
	}
}
int Graph::getVertexCount(){
	return this->vertexCount;
}
void Graph::addEdgeUndirected(int i, int j) {
    if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount) {
		adjMatrix[i][j] = true;
		adjMatrix[j][i] = true;
    }
}
void Graph::addEdgeDirected(int i, int j) {
    if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount) {
		adjMatrix[i][j] = true;		
    }
}
void Graph::removeEdgeUndirected(int i, int j) {
    if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount) {
		adjMatrix[i][j] = false;
		adjMatrix[j][i] = false;
    }
}
void Graph::removeEdgeDirected(int i, int j) {
    if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount) {
		adjMatrix[i][j] = false;		
    }
}
bool Graph::isEdge(int i, int j) {
    if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount)
        return adjMatrix[i][j];
    else{
		cout<<"Invalid vertex number.\n";
		return false;
	}
}
void Graph::display(){
    int  u,v; //vertex
	cout<<"\t   ";
	for(u=0; u<vertexCount; u++){
		cout<<u<<" ";
	}	
    for(u=0; u<vertexCount; u++) {
        cout << "\nadj[" << (char) (u+48) << "] -> ";
        for(v=0; v<vertexCount; ++v) {
            cout << " " << adjMatrix[u][v];
        }
    }
    cout << "\n\n";
}

void Graph::DFS(){
	cout<<"Start DFS...\n";
	int i, totalNode;
	totalNode = this->vertexCount;
	initializeState(); // init state to all 0, means undiscovered		
	
	for(i=0; i<totalNode; i++){
		if(this->state[i]==0){
			this->DFS_Visit(i);
		}
	}
	cout<<"\n";
} 
void Graph::DFS_Visit(int startNode){
	cout<<startNode<<"\n";	
	this->state[startNode] = 1; // discovered state
	this->time = this->time+1;	
	this->startTime[startNode] = this->time;
	int i;
	for(i=0; i<this->vertexCount; i++){
		if(this->isEdge(startNode, i) && this->state[i]==0){
			this->parent[i] = startNode;
			cout<<"Tree Edge: "<<startNode<<"->"<<i<<"\n";
			this->DFS_Visit(i);
		}else if(this->isEdge(startNode, i) && this->state[i]==1){ //1->discovered
			cout<<"Back Edge: "<<startNode<<"->"<<i<<"\n";
		}else if(this->isEdge(startNode, i) && this->state[i]==2){ //Processed
			if(this->startTime[startNode]<this->startTime[i]){
				cout<<"Forward Edge: "<<startNode<<"->"<<i<<"\n";
			}else{
				cout<<"Cross Edge: "<<startNode<<"->"<<i<<"\n";
			}
		} 		
	}	
	this->state[startNode] = 2; //processed
	this->time = this->time+1;
	this->endTime[startNode] = this->time;	
	this->topologicalSort.push(startNode);
}

void Graph::showTopologicalSort(){
	cout<<"Topological Sort . . .\n";
	while(!this->topologicalSort.empty()){
		//cout<<"Node: "<<this->topologicalSort.top()<<"\n";
		cout<<"Node: "<<this->topologicalSort.top()<<"<->Finish Time= "
			<<this->endTime[this->topologicalSort.top()]<<"\n";
		this->topologicalSort.pop();
	}
	cout<<"\n";
}
void Graph::doTransMatrix(){  // transpose the adjMatrix
	for(int i=0; i<vertexCount; i++){
		for(int j=0; j<vertexCount; j++){
			transMatrix[j][i] = adjMatrix[i][j];
		}
	}
}
bool Graph::isEdgeSCC(int i, int j){
	if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount)
        return transMatrix[i][j];
    else{
		cout<<"Invalid vertex number.\n";
		return false;
	}
}
void Graph::DFS_SCC(){		
	//initializeState(); // init state to all 0, means undiscovered		
	// do not call initializeState method here because it will erase 
	// finish time and other info that is calculate from DFS() earlier
	int node;
	while(!this->topologicalSort.empty()){
		node = this->topologicalSort.top();
		this->topologicalSort.pop(); // it will erase top node
		
		if(this->sccState[node]==0){			
			cout<<"Strongly Connected Components ...\n";
			this->DFS_Visit_SCC(node);			
		}		
	}	
	cout<<"\n";
} 
void Graph::DFS_Visit_SCC(int startNode){
	cout<<startNode<<"\n";	
	this->sccState[startNode] = 1; // discovered state	
	int i;
	for(i=0; i<this->vertexCount; i++){		
		if(this->isEdgeSCC(startNode, i) && this->sccState[i]==0){									
			this->topologicalSort.pop(); // before we call visit
			// pop out each finish time vale from stack
			this->DFS_Visit_SCC(i);			
		}		
	}	
	this->sccState[startNode] = 2; //processed	
}
void Graph::findStronglyConnectedComponents(){
	this->DFS();
	this->doTransMatrix();
	//this->displayTranspose();
	this->DFS_SCC();
}
void Graph::displayTranspose(){
	int  u,v; //vertex
	cout<<"Display Transpose Matrix\n\n";
	cout<<"\t   ";
	for(u=0; u<vertexCount; u++){
		cout<<u<<" ";
	}	
    for(u=0; u<vertexCount; u++) {
        cout << "\nadj[" << (char) (u+48) << "] -> ";
        for(v=0; v<vertexCount; ++v) {
            cout << " " << transMatrix[u][v];
        }
    }
    cout << "\n\n";
}
void main(){
	// To find strongly connected components we use the graph
	// in our lecture slide
	Graph g(8);
	g.initializeState();
	g.addEdgeDirected(0,1);
	g.addEdgeDirected(1,2); g.addEdgeDirected(1,4); g.addEdgeDirected(1,5);
	g.addEdgeDirected(2,3); g.addEdgeDirected(2,6);
	g.addEdgeDirected(3,2); g.addEdgeDirected(3,7);
	g.addEdgeDirected(4,0); g.addEdgeDirected(4,5);
	g.addEdgeDirected(5,6);
	g.addEdgeDirected(6,5); g.addEdgeDirected(6,7);
	g.addEdgeDirected(7,7); 
	g.display();
	g.findStronglyConnectedComponents();
	
	/*  // its for topological sort, graph used in your slide
	Graph g(6); 
	g.initializeState();
	g.addEdgeDirected(0,1); g.addEdgeDirected(0,3);
	g.addEdgeDirected(1,2); 
	g.addEdgeDirected(2,3);
	g.addEdgeDirected(3,1);
	g.addEdgeDirected(4,2); g.addEdgeDirected(4,5);
	g.addEdgeDirected(5,5);
	g.display();
	g.DFS(); // it explores from node 0
	g.showTopologicalSort();
	*/
	
}
 