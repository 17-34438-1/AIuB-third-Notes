#include<iostream>
#include<queue>
#include<stack>
using namespace std;

class Graph {
private:
      bool **adjMatrix;
      int vertexCount;
	  
	  int *state;
public:
    Graph(int vertexCount);
    ~Graph();
	int getVertexCount();
    void addEdge(int i, int j);
    void removeEdge(int i, int j);
    bool isEdge(int i, int j);
    void display();
	void initializeState();
    void BFS(int startNode);
	void DFS(int startNode);
	void DFS_Visit(int startNode);
	void DFS_EarlyInitiaization(int startNode);
};
Graph::Graph(int vertexCount) {	
    this->vertexCount = vertexCount;
	
	this->state = new int[vertexCount];

    adjMatrix = new bool*[vertexCount];
    for (int i = 0; i < vertexCount; i++) {
        adjMatrix[i] = new bool[vertexCount];
           for (int j = 0; j < vertexCount; j++)
              adjMatrix[i][j] = false;
    }
}
Graph::~Graph() {
    for (int i = 0; i < vertexCount; i++)
         delete[] adjMatrix[i];
            delete[] adjMatrix;
}
int Graph::getVertexCount(){
	return this->vertexCount;
}
void Graph::addEdge(int i, int j) {
    if (i >= 0 && i < vertexCount && j > 0 && j < vertexCount) {
           adjMatrix[i][j] = true;
                adjMatrix[j][i] = true;
    }
}
void Graph::removeEdge(int i, int j) {
    if (i >= 0 && i < vertexCount && j > 0 && j < vertexCount) {
            adjMatrix[i][j] = false;
                adjMatrix[j][i] = false;
    }
}
bool Graph::isEdge(int i, int j) {
    if (i >= 0 && i < vertexCount && j >= 0 && j < vertexCount)
        return adjMatrix[i][j];
    else{
		cout<<"Invalid vertex number.\n";
		return false;
	}
}
void Graph::display(){
    int  u,v; //vertex
    for(u=0; u<vertexCount; ++u) {
        cout << "\nadj[" << (char) (u+48) << "] -> ";
        for(v=0; v<vertexCount; ++v) {
            cout << " " << adjMatrix[u][v];
        }
    }
    cout << "\n\n";
}
void Graph::initializeState(){
	for(int i=0; i<this->vertexCount; i++)
	{
		this->state[i] = 0; // 0=undiscovered, 1=discovered, 2=processed		
	}
}
// This BFS method is a member of Graph class
// Develop a member function is a better choice
void Graph::BFS(int startNode){
	cout<<"Start BFS Member Function. . . \n";	
	initializeState();	// initialize state info for nodes, and undiscovered first

	this->state[startNode]=1; //discovered start node
	queue<int> q;
	q.push(startNode); //enqueue
	int node;
	while(q.empty()!= true){
		node = q.front();		
		q.pop();
		cout<<node<<"\n";  //bfs traversed node

		for(int j=0; j<this->vertexCount; j++){			
			if(this->isEdge(node, j) && state[j]==0){								
				this->state[j]=1; //discovered				
				q.push(j);								
			}			
		}// end for
		this->state[node]=2; //processed				
	}//end while
	

}
// below BFS method is not a member of Graph Class
void BFS(Graph *g, int s){
	cout<<"Start BFS . . . \n";	
	int *state;
	int totalNodes = g->getVertexCount();
	state = new int[totalNodes];
	for(int i=0; i<totalNodes; i++)
	{
		state[i] = 0; // 0=undiscovered, 1=discovered, 2=processed		
	}
	state[s]=1; //discovered start node
	queue<int> q;
	q.push(s); //enqueue
	int node;
	while(q.empty()!= true){
		node = q.front();		
		q.pop();
		cout<<node<<"\n";  //bfs traversed node

		for(int j=0; j<totalNodes; j++){			
			if(g->isEdge(node, j) && state[j]==0){								
				state[j]=1; //discovered				
				q.push(j);								
			}			
		}// end for
		state[node]=2; //processed				
	}//end while
	
}
void Graph::DFS(int startNode){
	cout<<"Start DFS...\n";
	int i, totalNode;
	totalNode = this->vertexCount;
	initializeState(); // init state to all 0, means undiscovered	
	this->state[startNode] = 1; // start node in discovered state
	
	cout<<startNode<<"\t";

	for(i=0; i<totalNode; i++){
		if(this->isEdge(startNode, i) && this->state[i]==0){
			this->DFS_Visit(i);
		}
	}
	cout<<"\n";
} 
void Graph::DFS_Visit(int startNode){
	cout<<startNode<<"\t";

	this->state[startNode] = 1; // discovered state
	int i;
	for(i=0; i<this->vertexCount; i++){
		if(this->isEdge(startNode, i) && this->state[i]==0){
			this->DFS_Visit(i);
		}
		this->state[startNode] = 2; //processed
	}	
}
void Graph::DFS_EarlyInitiaization(int startNode){	
	cout<<startNode<<"\t";
	this->state[startNode] = 1; // discovered state
	int i, totalNode;
	totalNode = this->vertexCount;

	for(i=0; i<vertexCount; i++){
		if(this->isEdge(startNode, i) && this->state[i]==0){
			this->DFS_EarlyInitiaization(i);
		}
		this->state[startNode] = 2; //processed
	}	
}
void main(){	
	Graph g(5);
	g.display();
	g.addEdge(0, 1); g.addEdge(1, 2); 
	g.addEdge(0, 3); g.addEdge(1, 3);
	g.addEdge(4, 3);	
	g.display();
	int s=0; int totalNodes = 5;
	BFS(&g, s);
	cout<<"\n";
	g.BFS(s);
	cout<<"-------------------------\n";
	g.DFS(s);
	cout<<"-----DFS Early Initialization-------\n";
	g.initializeState();
	g.DFS_EarlyInitiaization(s);
	cout<<"\n";
}
 